/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package br.com.ifba.atividade06.view;

// importando a classe DefaultListModel do pacote javax.swing
import javax.swing.DefaultListModel; 
import java.awt.Color; // importando classe para alterar cor do texto de label
import java.util.Arrays; // manipulação de vetores

/**
 *
 * @author juant
 */
public class TelaVetor extends javax.swing.JFrame {
    
    int vetor[] = new int[10]; // cria vetor com 10 posições
    DefaultListModel lista = new DefaultListModel();
    int selecionado = -1;

    /**
     * Creates new form TelaVetor
     */
    public TelaVetor() {
        initComponents();
        
        // associar o modelo da minha lista as configuraçoes da listModel
        lstVetor.setModel(lista);
        
        for(int i = 0; i < 10; i++){
            vetor[i] = 0; 
            lista.addElement("[" + i + "] -> " + vetor[i]); 
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lstVetor = new javax.swing.JList<>();
        spnValorInserido = new javax.swing.JSpinner();
        btnAdicionar = new javax.swing.JButton();
        btnRemover = new javax.swing.JButton();
        btnOrdenar = new javax.swing.JButton();
        lblError = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lstVetor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstVetorMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(lstVetor);

        btnAdicionar.setText("Adicionar");
        btnAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarActionPerformed(evt);
            }
        });

        btnRemover.setText("Remover");
        btnRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverActionPerformed(evt);
            }
        });

        btnOrdenar.setText("Ordenar");
        btnOrdenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOrdenarActionPerformed(evt);
            }
        });

        lblError.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        lblError.setForeground(new java.awt.Color(255, 0, 0));
        lblError.setText("                           ");
        lblError.setToolTipText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(spnValorInserido, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnAdicionar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnRemover, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnOrdenar, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(lblError, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spnValorInserido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAdicionar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnRemover)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnOrdenar)
                .addGap(18, 18, 18)
                .addComponent(lblError, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarActionPerformed
        // TODO add your handling code here:

        // garante que o valor só será inserido caso alguma posição do vetor seja selecionada
        if (selecionado != -1){ 
            /* verifica se os valores do spinner e do vetor na posicao selecionada 
               são iguais imprime mensagem de erro caso seja verdade, e caso 
               contrario faz a alteração */
            if (vetor[selecionado] == (int)spnValorInserido.getValue()){
                lblError.setForeground(Color.RED); // altera cor do label
                lblError.setText("<html>Valor igual ao atual, selecione outra "
                        + "posição.<html>"); // mensagem do tipo de erro
            }
            else {
                // pega o valor inserido no spinner e passa para a posicao selecionada no vetor
                vetor[selecionado] = (int)spnValorInserido.getValue();
                
                // limpa a atual lista
                lista.clear();

                // adiciona novamente os valores com o novo vetor (atualizado) ao jList
                for(int i = 0; i < vetor.length; i++){
                    // adiciona o elemento atual (i) do vetor na lista
                    lista.addElement("[" + i + "] -> " + vetor[i]);
                }

                lblError.setForeground(new Color(0, 180, 0)); // altera cor do label
                lblError.setText("Valor adicionado!!"); // afirma que foi realizado o pedido
                // selecionado volta a ser -1 para evitar sobreposição de valor do ultimo selecionado
                selecionado = -1; 
            }
        }
        else{
            lblError.setForeground(Color.RED); // altera cor do label
            lblError.setText("<html>Selecione alguma posição ao lado.<html>");
        }
    }//GEN-LAST:event_btnAdicionarActionPerformed

    private void lstVetorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstVetorMouseClicked
        // TODO add your handling code here:
        
        // Pega o valor do indice selecionado e guarda na variavel
        selecionado = lstVetor.getSelectedIndex(); 
    }//GEN-LAST:event_lstVetorMouseClicked

    private void btnRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverActionPerformed
        // TODO add your handling code here:
        
        // permite que o valor só seja removido caso alguma posição do vetor seja selecionada
        if (selecionado != -1){ 
            
            if (vetor[selecionado] != 0){
                // posição selecionada do vetor volta a ser 0
                vetor[selecionado] = 0;

                // limpa a atual lista
                lista.clear();

                // adiciona novamente os valores com o novo vetor (atualizado) ao jList
                for(int i = 0; i < vetor.length; i++){
                    // adiciona o elemento atual (i) do vetor na lista
                    lista.addElement("[" + i + "] -> " + vetor[i]);
                }

                lblError.setForeground(new Color(0, 180, 0)); // altera cor do label
                lblError.setText("Valor removido!!"); // afirma que foi realizado o pedido
            }
            else {
                lblError.setForeground(Color.RED); // altera cor do label
                lblError.setText("<html>Valor atual já é 0.<html>");
            }
            
            // selecionado volta a ser -1 para evitar sobreposição de valor do ultimo selecionado
            selecionado = -1; 
        }
        else{
            lblError.setForeground(Color.RED); // altera cor do label
            lblError.setText("<html>Selecione alguma posição ao lado.<html>");
        }
    }//GEN-LAST:event_btnRemoverActionPerformed

    private void btnOrdenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOrdenarActionPerformed
        // TODO add your handling code here:
        Arrays.sort(vetor); // ordena o vetor
        
        // limpa a atual lista
        lista.clear();
        
        for(int i = 0; i < vetor.length; i++){
            // adiciona o elemento atual (i) do vetor na lista
            lista.addElement("[" + i + "] -> " + vetor[i]);
        }
        
        lblError.setForeground(new Color(0, 180, 0)); // altera cor do label
        lblError.setText("Vetor ordenado!!"); // afirma que foi realizado o pedido
    }//GEN-LAST:event_btnOrdenarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaVetor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaVetor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaVetor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaVetor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaVetor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdicionar;
    private javax.swing.JButton btnOrdenar;
    private javax.swing.JButton btnRemover;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblError;
    private javax.swing.JList<String> lstVetor;
    private javax.swing.JSpinner spnValorInserido;
    // End of variables declaration//GEN-END:variables
}
